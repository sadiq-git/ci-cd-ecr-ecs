name: ci-cd-ecr-ecs
on:
  push:
    branches: [ main ]
jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: ap-south-1
      ECR_REPO: free-tier-poc-repo
      ECS_CLUSTER: free-tier-poc-cluster
      ECS_SERVICE: free-tier-poc-service
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}

      - uses: aws-actions/amazon-ecr-login@v2
        id: ecr

      - name: Build & tag
        run: |
          docker build -t $ECR_REPO:${{ github.sha }} ./app
          docker tag $ECR_REPO:${{ github.sha }} ${{ steps.ecr.outputs.registry }}/${ECR_REPO}:${{ github.sha }}

      - name: Create ECR if missing & push
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPO >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name $ECR_REPO
          docker push ${{ steps.ecr.outputs.registry }}/${ECR_REPO}:${{ github.sha }}

      - name: Update ECS service to new image
        run: |
          FAMILY=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE \
            --query 'services[0].taskDefinition' --output text | awk -F/ '{print $2}' | awk -F: '{print $1}')
          TD=$(aws ecs describe-task-definition --task-definition $FAMILY)
          NEW_TD=$(echo "$TD" | \
            jq --arg IMG "${{ steps.ecr.outputs.registry }}/${ECR_REPO}:${{ github.sha }}" \
              '.taskDefinition | .containerDefinitions[0].image=$IMG | del(.revision,.status,.requiresAttributes,.compatibilities,.registeredAt,.registeredBy,.taskDefinitionArn)')
          echo "$NEW_TD" > td.json
          REV_ARN=$(aws ecs register-task-definition --cli-input-json file://td.json --query 'taskDefinition.taskDefinitionArn' --output text)
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition "$REV_ARN" --force-new-deployment

      - name: Notify Lambda
        run: |
          aws lambda invoke --function-name poc-bedrock-hook \
            --payload "{\"image\":\"${{ steps.ecr.outputs.registry }}/${ECR_REPO}:${{ github.sha }}\",\"repo\":\"$ECR_REPO\",\"commit\":\"${{ github.sha }}\"}" \
            --cli-binary-format raw-in-base64-out /dev/stdout | cat
