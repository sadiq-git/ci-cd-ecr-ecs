name: ci-cd-ecr-ecs
on:
  push: { branches: [ main ] }

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    env:
      AWS_REGION: ap-south-1
      ECR_REPO: free-tier-poc-repo
      ECS_CLUSTER: free-tier-poc-cluster
      ECS_SERVICE: free-tier-poc-service
      FAMILY: free-tier-poc-task
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}

      - uses: aws-actions/amazon-ecr-login@v2
        id: ecr

      - name: Build & push image
        run: |
          docker build -t $ECR_REPO:${{ github.sha }} ./app
          docker tag $ECR_REPO:${{ github.sha }} ${{ steps.ecr.outputs.registry }}/${ECR_REPO}:${{ github.sha }}
          aws ecr describe-repositories --repository-names $ECR_REPO >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name $ECR_REPO
          docker push ${{ steps.ecr.outputs.registry }}/${ECR_REPO}:${{ github.sha }}

      - name: Install jq (if not preinstalled)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Register new task def revision with new image
        run: |
          TD=$(aws ecs describe-task-definition --task-definition $FAMILY --region $AWS_REGION)
          echo "$TD" | jq '.taskDefinition
            | .containerDefinitions[0].image = "'${{ steps.ecr.outputs.registry }}/${ECR_REPO}:${{ github.sha }}'"
            | del(.taskDefinitionArn,.revision,.status,.requiresAttributes,.compatibilities,.registeredAt,.registeredBy,.runtimePlatform)' > td.json
          REV_ARN=$(aws ecs register-task-definition --cli-input-json file://td.json --query 'taskDefinition.taskDefinitionArn' --output text --region $AWS_REGION)
          echo "Registered: $REV_ARN"
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition "$REV_ARN" --force-new-deployment --region $AWS_REGION

      - name: Notify Lambda (post-deploy hook)
        run: |
          aws lambda invoke --function-name poc-bedrock-hook \
            --payload "{\"image\":\"${{ steps.ecr.outputs.registry }}/${ECR_REPO}:${{ github.sha }}\",\"repo\":\"$ECR_REPO\",\"commit\":\"${{ github.sha }}\"}" \
            --cli-binary-format raw-in-base64-out --region $AWS_REGION /dev/stdout | cat
